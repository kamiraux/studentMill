Moulette
========

Presentation and objectives
---------------------------

This is a system to execute automatically a test suite on a set of students.

The following functionnalities are available:

- Isolation of students from each other and from the system

- Configuration file for a project

- Complete architecture for tests:

  - Set of compilation units: if the student code has to be compiled several
    way.

  - Set of test units: a set of tests may refer to a test unit, this avoid
    rewriting the same thing several times.

  - A set of test data: the test data may be put in this set in order to be
    referenced by tests afterwards.




About isolation
---------------

TODO


Configuration file
------------------

The configuration must expect to be executed in the directory where it is
located (verry important). Every path defined by the variables in this file must
be an absolute path. To use paths relatives to where the configuration file is,
the special variable $PWD should be used.

Example:

    $ ls
    project.config
    my_script.sh
    $ cat project.config
    #! /bin/sh

    PATH_TO_SCRIPT=$PWD/my_script.sh

TODO: Describe variables to define


Compilation units
-----------------

TODO

A compilation unit could be referred in a test directory using a file named
`ref_comp_unit` which contains the name (without '`.comp_unit`') of the
compilation unit.

The folder `comp_units` (if present) must be in the tests root directory. It
should contain a set of compilation units.

A compilation unit is represented by a directory whose name ends with
'.comp_unit'.

This folder may contain the following files:

- `pre_comp_tb_changes.sh` (x)
- `compile_student.sh` (x)
- `exec_timeout`
- `abs_timeout`
- `expected` (d)


### Pre compilation tarball changes

Execution of `pre_comp_tb_changes.sh`

This script should expect to be run into the compilation unit directory.  The
first argument to this script is the absolute path to the student directory
corresponding to the current compilation unit.


### Compilation of the student code

Execution of `compile_student.sh`

This script should expect to be run in the student directory corresponding to
the current compilation unit.

A timeout is applied on this process using `exec_timeout` and `abs_timeout`
files if present, if not a default timeout is applied as described in the
section _'Timeout'_ of the _'Isolation'_ part.


### Checking presence of expected files

The system allow you to defines a set of files that must be present for the
compilation unit to be marked as "valid".

To achieve this you have to create a folder named `expected` int the compilation
unit directory.

In this folder you may create as many folders as you want, in
each one the system will look for a file named `expected_files`. In this file
are the names of every files that the presence has to be checked (one file name
per line).

#### Checking usage of functions

If there is a file named `authorized_functions` in the folder then
all expected files listed in `expected_files` will be checked for usage of
external functions.

The format of this file is as follow:

- One function name per line;

- A function name may use the character _\`\*\`_ with the sane meaning than globbing.

  For example: "`dup*`" on a line will allow all function whose name begin with
  'dup' (ie. `dup`, `dup2`, etc).

If usage of a non-authorized function is detected an error will be reported and
the whole compilation unit will be marked as failed.




Test units
----------

TODO

The test units are defined in a folder named `test_units`. This folder (if
present) must be in the tests root directory. It should contain a set of test
units.

A test unit could be referred in a test directory using a file named
`ref_test_unit` which contains the name (without '`.test_unit`') of the
test unit.

A test unit is represented by a directory whose name ends with
'.test_unit'.

This folder may contain the following files:

- `configure` (x)
- `Makefile`
- `gen_tests_exec_commands.sh` (x)
- `pre_test.sh` (x)
- `exec_timeout`
- `abs_timeout`
- `compute_result.sh` (x)

### Configure and Makefile

These files will be used twice: first when compiling tests during the
preprocessing step, second when linkink (if needed) the test to the student code
(this step is important for projects that generate a static library).

First time they will be called inside the test folder and the rule called in
the Makefile is '`common_compilation`'.

Second time they will be executed inside the folder where the test will be
executed (different for each student), the binary (if any) to be generated
should be put here. In order to access previously compilated files (from the
test and from the student) two variables are set before the call to `make`:

- `COMP_UNIT_DIR` contains the absolute path to the student directory
  corresponding to the current test's compilation unit (this may contain the lib
  or binary generated by student compilation).

- `TEST_DIR` contains the absolute path to the test folder (this may contain the
  precompiled object files for the test).

The rule called in the Makefile is '`test_compilation`'.


### Generation of test execution commands

During the preprocessing step the script `gen_tests_exec_commands.sh` of the
test unit will be called. Its goal is to generate a file that contains the list
of commands that will be called during the execution of the test.

The script `gen_tests_exec_commands.sh` will be executed inside each test folder
that refers the test unit. This script must generate a file named
`test_exec_commands` with the following format: each line represents a test; line
format is: '`<test_id>,<test_command>`'.

- `<test_id>` is the identifier of the test, it will be its name in the
  results. It will also allow to refer files correspondig to the test:

    * `<id_test>.in` file that will be piped to the standard input for the
      execution of the test;

    * `<id_test>.arg` file that contains the arguments that will be given to the
      program for the execution of the test;

    * `<id_test>.out` file that contains the standard output of the reference;

    * `<id_test>.err` file that contains the error output of the reference;

    * `<id_test>.ret` file that contains the return code of the reference;

    * `<id_test>.ref` file that will be diffed with the`<id_test>.my` int the
      test execution folder ;

    * `<id_test>.name` file that contains the name of this test. **Not implemented**

    These files are specific to a test so they are located in the `.test`
    folder. For more details please refers to the part on test folders.

- `test_command` is the command to be executed, ie. the path to a binary that
  will be executed for the test. It is important to note that this command
  should assume to be launched from the student test folder.

  For example if the `test_compilation` rule of the Makefile (see previous part
  on _'Configure and Makefile'_ in the test units) has generated (or copied) a
  binary named `test` in the directory where it was executed, then the
  `test_command` shpuld be `./test`. You must not give the arguments of the call
  in the `test_command`. The arguments will be appended automatically using the
  file `test_id.arg` (if any) present in the test folder.

Note that if there is no `gen_tests_exec_commands.sh` file or its execution does
not generate the `test_exec_commands` file, then nothing will be executed
(unless the test directory contains a static file `test_exec_commands`).


### Pre-test script execution

A script named `pre_test.sh` may be put in the test unit folder if any action
must be executed on the system before the execution of a test. It will be
executed juste before the execution of the test (just once per test, not before
each subtest).

This script must assume to be executed in the folder where it is located,
therefore the first argument of the script will be the absolute path to the test
execution directory.

This script is called after copying test data to ths test execution directory
and before the test execution.


### Timeouts

The files `exec_timeout` and `abs_timeout` located in a test unit are used as
the timeout for the execution of each test refering to the test unit.


### Computing the results

If there is no specific script, then the standard output, error output and
return value for the test execution will be compared to the reference files
(`<id_test>.out`, `<id_test>.err` and `<id_test>.ret`). If a `<id_test>.ref` is
present it will also be checked. Each difference will be reported and the
error log will be generated. Note that only present files will be diffed
(ie. if a file is not present, no error will be reported, the check will just
not be done).

If there is a specific script (named `compute_result.sh`) it will be executed
after (not instead).  It will be executed inside the result directory specific
to this test (ie. the `.test`). It is assumed to generate, at least, a file
named `test.result`.

- If the result is found as successful then the test.result must contain
  "`PASS`";

- If the result is found as failed then the test.result must contain "`FAIL`". A
  file named `test.error` may also be created with an explanation of why the
  test wasn't successful and an error log.

The file will be given the following 3 arguments:

- Absolute path to the test dir (ref)
- Absolute path to the output dir
- Absolute path to the test exec dir

### Precedence considerations

The following files may be present in a test (`.test`) directory:

- `configure`
- `Makefile`
- `pre_test.sh`
- `gen_test_exec_commands.sh`
- `exex_timeout`
- `abs_timeout`
- `compute_result.sh`

Each of these files, if present in a test directory, has the exact same meaning
and usage than the one that may bre present in a test unit. The only difference
is that a file present in a test directory takes precedence over the one present
in the test unit directory. This allow to have a generic behavior for a set of
test, but keep the possibility to have a more specific behavior for a test.


Generationg traces
------------------

At the end of computation for a student, a script will be called to generate the
final "trace".  This script will use a variable named '`M_TRACE_GENERATOR`' from
the project configuration file. This variable must refer to a trace generator
for the wanted output trace format. It may be an absolute path, but if it is not
an absolute path, then the script will be searched in the `trace_generators`
directory in the moulette assests directory.

The generator will be executed inside the result directory so that it can be
browsed. It will be given 2 arguments, the first one is the login of the student
and the second one is the path to the directory containing the generator (this
way the generator can use some files in the directory where it is located).

The trace must be generated on the standard output, it will automatically be put
in the correct file.

Notes
=====

In this document, when talking about a file we use the following convention:

- (x) represents a executable file
- (d) represents a directory
- no annotation represents a regular file


Appendix
========
